yvalsBlpw$upperci <- yvalsBlpw$fit + yvalsBlpw$se.fit*2
yvalsBlpw$lowerci <- yvalsBlpw$fit - yvalsBlpw$se.fit*2
par(mar = c(5.1,5.1,4.1,2.1))
plot(x = propsBlpw$YEAR, y = propsBlpw$proportion, ylab = "Proportion of checklists\nreporting Blackpoll Warbler",
xlab = "Year",
pch = 16, col = "blue", lwd = 2)
# add the fitted line
lines(newdata$year, yvalsBlpw$fit, col = "red", lwd = 2)
lines(newdata$year, yvalsBlpw$lowerci, col = "red", lwd = 2, lty = 3)
lines(newdata$year, yvalsBlpw$upperci, col = "red", lwd = 2, lty = 3)
par(mar = c(5.1,5.1,4.1,2.1))
par(mfrow = c(2,2))
plot(x = props$YEAR, y = props$proportion, ylab = "Proportion of checklists\nreporting Fox Sparrow",
xlab = "Year",
pch = 16, col = "blue", lwd = 2)
# add the fitted line
lines(newdata$year, yvals$fit, col = "red", lwd = 2)
lines(newdata$year, yvals$lowerci, col = "red", lwd = 2, lty = 3)
lines(newdata$year, yvals$upperci, col = "red", lwd = 2, lty = 3)
### Bicknell's Thrush:
plot(x = propsBith$YEAR, y = propsBith$proportion, ylab = "Proportion of checklists\nreporting Bicknell's Thrush",
xlab = "Year",
pch = 16, col = "blue", lwd = 2)
# add the fitted line
lines(newdata$year, yvalsBith$fit, col = "red", lwd = 2)
lines(newdata$year, yvalsBith$lowerci, col = "red", lwd = 2, lty = 3)
lines(newdata$year, yvalsBith$upperci, col = "red", lwd = 2, lty = 3)
### Blackpoll Warbler
plot(x = propsBlpw$YEAR, y = propsBlpw$proportion, ylab = "Proportion of checklists\nreporting Blackpoll Warbler",
xlab = "Year",
pch = 16, col = "blue", lwd = 2)
# add the fitted line
lines(newdata$year, yvalsBlpw$fit, col = "red", lwd = 2)
lines(newdata$year, yvalsBlpw$lowerci, col = "red", lwd = 2, lty = 3)
lines(newdata$year, yvalsBlpw$upperci, col = "red", lwd = 2, lty = 3)
par(mar = c(5.1,5.1,4.1,2.1))
par(mfrow = c(2,2))
plot(x = props$YEAR, y = props$proportion, ylab = "Proportion of cells\nreporting Fox Sparrow",
xlab = "Year",
pch = 16, col = "red", lwd = 2)
# add the fitted line
lines(newdata$year, yvals$fit, col = "red", lwd = 2)
lines(newdata$year, yvals$lowerci, col = "red", lwd = 2, lty = 3)
lines(newdata$year, yvals$upperci, col = "red", lwd = 2, lty = 3)
### Bicknell's Thrush:
plot(x = propsBith$YEAR, y = propsBith$proportion, ylab = "Proportion of cells\nreporting Bicknell's Thrush",
xlab = "Year",
pch = 16, col = "blue", lwd = 2)
# add the fitted line
lines(newdata$year, yvalsBith$fit, col = "blue", lwd = 2)
lines(newdata$year, yvalsBith$lowerci, col = "blue", lwd = 2, lty = 3)
lines(newdata$year, yvalsBith$upperci, col = "blue", lwd = 2, lty = 3)
### Blackpoll Warbler
plot(x = propsBlpw$YEAR, y = propsBlpw$proportion, ylab = "Proportion of cells\nreporting Blackpoll Warbler",
xlab = "Year",
pch = 16, col = "black", lwd = 2)
# add the fitted line
lines(newdata$year, yvalsBlpw$fit, col = "black", lwd = 2)
lines(newdata$year, yvalsBlpw$lowerci, col = "black", lwd = 2, lty = 3)
lines(newdata$year, yvalsBlpw$upperci, col = "black", lwd = 2, lty = 3)
confint(FOSP.m1)
confint(FOSP.m2)
coef(FOSP.m2)
exp(0.097)/(1+exp(0.097))
View(yvals)
View(yvals)
predict(FOSP.m1,newdata = data.frame(year = 2003),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2003),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2004),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2005),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2005),type = "response")/0.00963655
0.00963655/0.0115372
predict(FOSP.m2,newdata = data.frame(year = 2003),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2004),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2005),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2006),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2007),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2008),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2009),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2010),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2011),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2012),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2013),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2014),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2015),type = "response")
predict(FOSP.m2,newdata = data.frame(year = 2016),type = "response")
confint(FOSP.m2)
coef(FOSP.m2)
coef(BITH.m2)
confint(BITH.m2)
coef(BLPW.m1)
confint(BLPW.m1)
predict(BLPW.m1,newdata = data.frame(year = 2016, effort = 1000))
predict(BLPW.m1,newdata = data.frame(year = 2016, effort = 1000), type = "response")
predict(BLPW.m1,newdata = data.frame(year = 2015, effort = 1000), type = "response")
predict(BLPW.m1,newdata = data.frame(year = 2003, effort = 1000), type = "response")
0.102776/0.4245277
0.42/0.10
0.42*0.8
0.42*0.2
0.14^14
<<<<<<< HEAD
install.packages(wallace)
install.packages("wallace")
install.packages("spam")
install.packages("wallace")
install.packages("spam")
libary(wallace)
library(wallace)
run_wallace()
View(checklists.unique)
run_wallace()
fospPresenceCanada <- checklists.unique %>%
filter(., FOSPp = 1 & COUNTRY == "Canada") %>%
select(1:11)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
fospPresenceCanada <- checklists.unique %>%
filter(., FOSPp = 1 & COUNTRY == "Canada") %>%
select(1:11)
# Create a presence-only database for Canada, use this to estimate potential range, and see how it compares
# to area of expansion.
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY == "Canada") %>%
select(1:11)
# Create a presence-only database for Canada, use this to estimate potential range, and see how it compares
# to area of expansion.
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY = "Canada") %>%
select(1:11)
# Create a presence-only database for Canada, use this to estimate potential range, and see how it compares
# to area of expansion.
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY = "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
# Create a presence-only database for Canada, use this to estimate potential range, and see how it compares
# to area of expansion.
fospPresenceCanada <- checklists.unique %>%
filter(.,FOSPp = 1 & COUNTRY = "Canada") %>%
select(.,SAMPLING_EVENT_ID:COUNTY)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY = "Canada")
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY == "Canada")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY == "Canada")
# Create a presence-only database for Canada, use this to estimate potential range, and see how it compares
# to area of expansion.
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY = "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY = "Canada")
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1, COUNTRY = "Canada")
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1, COUNTRY = Canada)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1, COUNTRY == Canada)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp = 1 & COUNTRY == "Canada")
checklists.unique %>%
filter(FOSPp = 1 & COUNTRY == "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
checklists.unique %>%
filter(FOSPp == 1 & COUNTRY == "Canada")
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY == "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
View(fospPresenceCanada)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY == "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY,FOSPp)
View(fospPresenceCanada)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY == "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
write.csv(fospPresenceCanada,"fospPresenceCanada.csv")
run_wallace()
fospPresenceCanada <- fospPresenceCanada[,c(2,4,3,1,5,6,7,8,9,10,11)]
colnames(fospPresenceCanada) <- c("name","longitude","latitude","event","year","month","day","time","country","state","county")
write.csv(fospPresenceCanada,"fospPresenceCanada.csv")
run_wallace()
run_wallace()
system.file('java', package="dismo")
devtools::install_github("ramnathv/htmlwidgets")
install.packages("devtools")
devtools::install_github("ramnathv/htmlwidgets")
run_wallace()
install.packages("shiny")
run_wallace()
library("wallace", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
run_wallace()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
run_wallace()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
run_wallace()
library(wallace)
run_wallace()
#Niche modeling with Wallace
install.packages("wallace")
library(wallace)
install.packages("htmlwidgets")
library(wallace)
run_wallace()
fospPresenceCanadaSample <- head(fospPresenceCanada)
View(fospPresenceCanadaSample)
write.csv(fospPresenceCanadaSample,"fospPresenceCanadaSample.csv")
run_wallace()
run_wallace()
View(checklists.unique)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY == "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
## Re-arrange and re-name columns to meet Wallace specs:
fospPresenceCanada$name <- "Passerella iliaca"
View(fospPresenceCanada)
library(dplyr)
fospPresenceCanada <- checklists.unique %>%
filter(FOSPp == 1 & COUNTRY == "Canada") %>%
select(SAMPLING_EVENT_ID:COUNTY)
## Re-arrange and re-name columns to meet Wallace specs:
fospPresenceCanada$name <- "Passerella iliaca"
View(fospPresenceCanada)
fospPresenceCanada <- fospPresenceCanada[,c(12,4,3,2,1,5,6,7,8,9,10,11)]
View(fospPresenceCanada)
colnames(fospPresenceCanada) <- c("name","longitude","latitude","event","year","month","day","time","country","state","county")
colnames(fospPresenceCanada) <- c("name","longitude","latitude","sample","event","year","month","day","time","country","state","county")
write.csv(fospPresenceCanada,"fospPresenceCanada.csv")
run_wallace()
run_wallace()
run_wallace()
run_wallace()
library(rJava)
run_wallace()
library(wallace)
run_wallace()
run_wallace()
run_wallace()
options(java.parameters = "-Xmx800000m")
run_wallace()
library(wallace)
run_wallace()
run_wallace()
run_wallace()
run_wallace()
run_wallace()
#Niche modeling with Wallace
#install.packages("wallace")
library(wallace)
options(java.parameters = "-Xmx800000m")
run_wallace()
=======
>>>>>>> origin/master
>>>>>>> 45ec76f0d3790e202ec3bffb173cc7d66487c329
#Niche modeling with Wallace
#install.packages("wallace")
library(wallace)
options(java.parameters = "-Xmx800000m")
run_wallace()
#Niche modeling with Wallace
#install.packages("wallace")
library(wallace)
run_wallace()
#Niche modeling with Wallace
#install.packages("wallace")
install.packages("auk")
library(auk)
library(data.table)
library(dplyr)
library(tidyr)
library(sp)
library(ggplot2)
library(rgeos)
library(maptools)
library(raster)
library(maps)
library(rgdal)
ebAllFosp.reduced2 <- ebAllFosp %>%
filter(STATE_PROVINCE == "Newfoundland and Labrador"|
STATE_PROVINCE == "New Brunswick"|STATE_PROVINCE == "Nova Scotia"|
STATE_PROVINCE == "Quebec"|STATE_PROVINCE == "Ontario"|
STATE_PROVINCE == "Prince Edward Island"|STATE_PROVINCE == "Saskatchewan"|
STATE_PROVINCE == "Manitoba")
ebAllFosp.reduced2$MONTH = month(ebAllFosp.reduced$`OBSERVATION DATE`)
ebAllFosp.reduced2$YEAR = year(ebAllFosp.reduced$`OBSERVATION DATE`)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2%>%
filter(MONTH == 6|MONTH == 7)
ebAllFosp.reduced2 <- ebAllFosp2 %>%
filter(STATE_PROVINCE == "Newfoundland and Labrador"|
STATE_PROVINCE == "New Brunswick"|STATE_PROVINCE == "Nova Scotia"|
STATE_PROVINCE == "Quebec"|STATE_PROVINCE == "Ontario"|
STATE_PROVINCE == "Prince Edward Island"|STATE_PROVINCE == "Saskatchewan"|
STATE_PROVINCE == "Manitoba")
ebAllFosp.reduced2$MONTH = month(ebAllFosp.reduced$`OBSERVATION DATE`)
ebAllFosp.reduced2$YEAR = year(ebAllFosp.reduced$`OBSERVATION DATE`)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2%>%
filter(MONTH == 6|MONTH == 7)
ebAllFosp.reduced2 <- ebAllFosp %>%
filter(STATE_PROVINCE == "Newfoundland and Labrador"|
STATE_PROVINCE == "New Brunswick"|STATE_PROVINCE == "Nova Scotia"|
STATE_PROVINCE == "Quebec"|STATE_PROVINCE == "Ontario"|
STATE_PROVINCE == "Prince Edward Island"|STATE_PROVINCE == "Saskatchewan"|
STATE_PROVINCE == "Manitoba")
ebAllFosp.reduced2$MONTH = month(ebAllFosp.reduced2$`OBSERVATION DATE`)
ebAllFosp.reduced2$YEAR = year(ebAllFosp.reduced2$`OBSERVATION DATE`)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2%>%
filter(MONTH == 6|MONTH == 7)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2%>%
group_by(STATE_PROVINCE)%>%
sample_frac(5, replace = FALSE)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2%>%
group_by(STATE_PROVINCE)%>%
sample_frac(0.05, replace = FALSE)
View(ebAllFosp.reduced2)
ebAllFosp.reduced2 <-
select(SCIENTIFIC_NAME,LATITUDE,LONGITUDE)
ebAllFosp.reduced2 <-
select(SCIENTIFIC NAME,LATITUDE,LONGITUDE)
ebAllFosp.reduced2 <-
select("SCIENTIFIC NAME","LATITUDE","LONGITUDE")
ebAllFosp.reduced2 <- ebAllFosp.reduced2%>%
select(SCIENTIFIC NAME,LATITUDE,LONGITUDE)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2 %>%
select(.,SCIENTIFIC NAME,LATITUDE,LONGITUDE)
ebAllFosp.reduced2 <-
ebAllFosp.reduced2 %>%
select(6,LATITUDE,LONGITUDE)
ebAllFosp.reduced2 <- select(ebAllFosp.reduced2,6,LATITUDE,LONGITUDE)
ebAllFosp.reduced2 <- dplyr::select(ebAllFosp.reduced2,6,LATITUDE,LONGITUDE)
write.csv(ebAllFosp.reduced2, "Passerella_iliaca_Canada.csv")
run_wallace()
## Look at BBS trends:
maineBBS <- read.csv("maineFoxSparrowBBS.csv")
View(maineBBS)
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine")
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine")
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
theme(panel.grid.major.x = 1)
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1994, 2017,1)))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2017,1))) + theme(axis.text.x = element_text(angle = 340, vjust =0.5))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2017,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2016,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
ggplot(maineBBS, aes(x = year, y = count)) + geom_line() + geom_point() + facet_wrap(~route)
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
complete(year, fill = list(totalCt = 0))%>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2016,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
complete(year, fill = list(totalCt = 0))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
complete(as.factor(year), fill = list(totalCt = 0))%>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2016,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
maineBBS$yearFac <- as.factor(maineBBS$year)
maineBBS %>%
group_by(yearFac) %>%
summarize(totalCt = sum(count)) %>%
complete(yearFac, fill = list(totalCt = 0))%>%
ggplot(., aes(x = yearFac, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2016,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
maineBBS %>%
group_by(yearFac) %>%
summarize(totalCt = sum(count)) %>%
complete(yearFac, fill = list(totalCt = 0))
maineBBS <- complete(maineBBS, route, year, fill = list(count = 0))
View(maineBBS)
maineBBS <- complete(maineBBS, route, year, fill = list(count = 0, latitude = latitude,
longitdue = longitude))
maineBBs <- ifelse(maineBBS$latitude = NA, maineBBS$latitude, maineBBS$latitude)
maineBBs <- ifelse(maineBBS$latitude == NA, maineBBS$latitude, maineBBS$latitude)
## Look at BBS trends:
maineBBS <- read.csv("maineFoxSparrowBBS.csv")
maineBBS <- complete(maineBBS, route, year, fill = list(count = 0))
maineBBs$latitude <- ifelse(maineBBS$latitude == NA, maineBBS$latitude, maineBBS$latitude)
rm(maineBBs)
maineBBS$latitude <- ifelse(maineBBS$latitude == NA, maineBBS$latitude, maineBBS$latitude)
View(maineBBS)
maineBBS <- complete(maineBBS, route, year, fill = list(count = 0))
## Look at BBS trends:
maineBBS <- read.csv("maineFoxSparrowBBS.csv")
maineBBS <- complete(maineBBS, route, year, fill = list(count = 0))
View(maineBBS)
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
ggplot(., aes(x = year, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_continuous(breaks = c(seq(1993, 2016,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count))
maineBBS %>%
group_by(year) %>%
complete(year, fill = list(totalCt = 0))%>%
summarize(totalCt = sum(count)) %>%
)
maineBBS %>%
group_by(year) %>%
complete(year, fill = list(totalCt = 0))%>%
summarize(totalCt = sum(count))
maineBBS %>%
group_by(year) %>%
summarize(totalCt = sum(count)) %>%
complete(year, fill = list(totalCt = 0))
maineBBS$yearFac <- as.factor(maineBBS$year)
maineBBS %>%
group_by(year, yearFac) %>%
summarize(totalCt = sum(count)) %>%
complete(yearFac, fill = list(totalCt = 0))
maineBBS %>%
group_by(yearFac) %>%
summarize(totalCt = sum(count)) %>%
complete(yearFac, fill = list(totalCt = 0)) %>%
ggplot(., aes(x = yearFac, y = totalCt)) + geom_line() + geom_point() +
xlab("Year") + ylab("Total number of Fox Sparrows\ncounted on BBS routes in Maine") +
scale_x_discrete(breaks = c(seq(1993, 2016,1))) + theme(axis.text.x = element_text(angle = 320, vjust =0.5))
maineBBS %>%
group_by(yearFac) %>%
summarize(totalCt = sum(count)) %>%
complete(yearFac, fill = list(totalCt = 0))
maineBBS %>%
group_by(yearFac) %>%
summarize(totalCt = sum(count)) %>%
expand(yearFac, fill = list(totalCt = 0))
maineBBS %>%
group_by(yearFac) %>%
complete(yearFac, fill = list(count = 0)) %>%
summarize(totalCt = sum(count))
maineBBS %>%
group_by(yearFac) %>%
complete(yearFac, fill = list(sum = 0)) %>%
summarize(totalCt = sum(count))
maineBBS %>%
group_by(yearFac) %>%
complete(yearFac, fill = list(sum = 0)) %>%
summarize(totalCt = sum(count), drop = FALSE)
maineBBS %>%
group_by(yearFac) %>%
summarize(totalCt = sum(count))
maineBBSzerofill <- data.frame(year = seq(1993,2016,1),
count = c(2,6,9,9,5,19,24,20,22,8,10,6,3,3,1,1,1,0,0,3,0,0,6))
maineBBSzerofill <- data.frame(year = seq(1993,2016,1),
count = c(2,6,9,9,5,19,24,20,22,8,10,0,6,3,3,1,1,1,0,0,3,0,0,6))
## Look at BBS trends:
maineBBS <- read.csv("maineFoxSparrowBBS.csv")
maineBBSzerofill <- data.frame(year = seq(1993,2016,1),
count = c(2,6,9,9,5,19,24,20,22,8,10,0,6,3,3,1,1,1,0,0,3,0,0,6))
ggplot(maineBBSzerofill, aes(x = year, y = count)) + geom_line + geom_point()
ggplot(maineBBSzerofill, aes(x = year, y = count)) + geom_line() + geom_point()
ggplot(maineBBSzerofill, aes(x = year, y = count)) + geom_line() + geom_point() +
scale_x_continuous(breaks = seq(1993,2016,1)) + xlab("Year") + ylab("Fox Sparrows counted\non BBS routes in Maine")
ggplot(maineBBSzerofill, aes(x = year, y = count)) + geom_line() + geom_point() +
scale_x_continuous(breaks = seq(1993,2016,1)) + xlab("Year") + ylab("Fox Sparrows counted\non BBS routes in Maine") +
theme(axis.text.x = element_text(angle = 320, vjust = 0.5))
ggplot(maineBBSzerofill, aes(x = year, y = count)) + geom_line() + geom_point() +
scale_x_continuous(breaks = seq(1993,2016,1)) + xlab("Year") + ylab("Fox Sparrows counted on BBS routes in Maine") +
theme(axis.text.x = element_text(angle = 320, vjust = 0.5))
